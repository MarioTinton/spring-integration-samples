/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.integration.samples.tcpclientserver;

import java.io.DataOutputStream;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import org.springframework.context.support.GenericXmlApplicationContext;
import org.springframework.core.env.MapPropertySource;
import org.springframework.integration.test.util.SocketUtils;

/**
 * Demonstrates the use of a gateway as an entry point into the integration flow.
 * The message generated by the gateway is sent over tcp by the outbound gateway
 * to the inbound gateway. In turn the inbound gateway sends the message to an
 * echo service and the echoed response comes back over tcp and is returned to
 * the test case for verification.
 *
 * The test uses explicit transformers to convert the byte array payloads to
 * Strings.
 *
 * Several other samples are provided as JUnit test-cases:
 *
 * <ul>
 *     <li>TcpClientServerDemoWithConversionServiceTest</li>
 *     <li>TcpServerConnectionDeserializeTest</li>
 *     <li>TcpServerCustomSerializerTest</li>
 * </ul>
 *
 * @author Gunnar Hillert
 *
 */
public final class Main {

	/**
	 * Prevent instantiation.
	 */
	private Main() {}

	/**
	 * Load the Spring Integration Application Context
	 *
	 * @param args - command line arguments
	 * @throws Exception
	 * @throws
	 */
	public static void main(final String... args) throws Exception {

		final Scanner scanner = new Scanner(System.in);

		System.out.println("\n========================================================="
						+ "\n                                                         "
						+ "\n    Welcome to the Spring Integration                    "
						+ "\n          TCP-Client-Server Sample!                      "
						+ "\n                                                         "
						+ "\n    For more information please visit:                   "
						+ "\n    http://www.springintegration.org/                    "
						+ "\n                                                         "
						+ "\n=========================================================" );

		final GenericXmlApplicationContext context = Main.setupContext();

		for (int j = 0; j < 5; j++) {
			new Thread(new Runnable() {

				@Override
				public void run() {
					String id = java.util.UUID.randomUUID().toString();
					try (Socket echoSocket = new Socket("localhost", 9999)) {
						DataOutputStream dos = new DataOutputStream(echoSocket.getOutputStream());
						for (int i = 0; i < 500; i++) {
							String s = id + " " + i;
					   dos.writeInt(s.length());
							dos.write(s.getBytes());
							dos.flush();
							System.out.println(id + " - " + i + " - " + s.length());
						}
					}
					catch (Exception e) {
						e.printStackTrace();
					}
				}
			}).start();
		}

		while (true) {

			final String input = scanner.nextLine();

			if("q".equals(input.trim())) {
				break;
			}
		}

		System.out.println("Exiting application...bye.");
		System.exit(0);

	}

	public static GenericXmlApplicationContext setupContext() {
		final GenericXmlApplicationContext context = new GenericXmlApplicationContext();

		System.out.print("Detect open server socket...");
		int availableServerSocket = SocketUtils.findAvailableServerSocket(5678);

		final Map<String, Object> sockets = new HashMap<String, Object>();
		sockets.put("availableServerSocket", availableServerSocket);

		final MapPropertySource propertySource = new MapPropertySource("sockets", sockets);

		context.getEnvironment().getPropertySources().addLast(propertySource);

		System.out.println("using port " + context.getEnvironment().getProperty("availableServerSocket"));

		context.load("classpath:META-INF/spring/integration/context.xml");
		context.registerShutdownHook();
		context.refresh();

		return context;
	}
}
